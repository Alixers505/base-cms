import { getAsObject, getAsArray } from "@base-cms/object-path";

$ const { components, fragments } = out.global;

$ const Component = components.get(input.componentName);
$ const pageNumber = input.pageNumber || 1;

$ const queryParams = {
  ...getAsObject(input, "queryParams"),
  queryName: "LoadMore",
  queryFragment: fragments.get(input.fragmentName),
};

<if(Component)>
  <marko-web-query|{ nodes, pageInfo }| name=input.queryName params=queryParams>
    <if(nodes.length)>
      <marko-web-page-container tag="section" ...input.pageInput>
        <!-- Fire generic `load-more-in-view` event (other services can attach to this, e.g. GTM) -->
        <marko-web-browser-component name="TriggerInViewEvent" props={ eventName: "load-more-in-view", data: { page_number: pageNumber + 1 } } />
        <if(pageNumber === 1 && input.header)>
          <div class="load-more-header">
            $!{input.header}
          </div>
        </if>
        <${Component} ...input.componentInput nodes=nodes page-info=pageInfo />
      </marko-web-page-container>

      $ const { endCursor, hasNextPage } = pageInfo;
      $ delete queryParams.skip;
      $ delete queryParams.queryFragment;
      $ delete queryParams.renderBody;
      $ const provide = {
        ...input,
        queryParams: { ...queryParams, after: endCursor },
      };

      <!-- <endeavor-load-more-button
        append-to=(input.appendTo || '.container-fluid-max')
        block-name="load-more"
        label="Load More Content"
        max-pages=input.maxPages
        page-number=pageNumber
        provide=provide
        show=hasNextPage
      /> -->
    </if>
  </marko-web-query>
</if>
