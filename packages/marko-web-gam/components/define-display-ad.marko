import { BEM, warn } from "@base-cms/utils";
import { getAsObject } from "@base-cms/object-path";
import generateId from "../utils/generate-id";
import buildSlots from "../utils/build-slots";
import slotStyle from "../utils/slot-size-style";

$ const { isArray } = Array;
$ const { path, inc, targeting, withWrapper } = input;
$ const id = input.id || generateId({ inc });

$ const size = typeof input.size === "string" ? [input.size] : (isArray(input.size) ? input.size : []);
$ const applyStyle = input.applyStyle == null ? false : input.applyStyle;
$ const style = applyStyle ? slotStyle(size) : null;

$ const calls = [];
$ const slots = {
  [id]: {
    path,
    size,
    sizeMapping: input.sizeMapping,
    targeting,
  },
};
$ calls.push(...buildSlots(slots));
$ calls.push(`googletag.display('${id}');`);

$ const attrs = {
  ...getAsObject(input.attrs),
  "data-gam-path": path,
  "data-gam-size": JSON.stringify(size),
  "data-gam-targeting": targeting ? JSON.stringify(targeting) : undefined,
};

$ const blockName = input.blockName || "ad-container";
$ const classNames = [blockName, ...BEM.applyModifiers(blockName, input.modifiers), input.class];

<if(path)>
  <div
    id=(withWrapper ? null : id)
    style=style
    class=classNames
    ...attrs
  >
    <marko-web-gam-ad-wrapper id=id enabled=withWrapper block-name=blockName>
      <script>googletag.cmd.push(function() { ${calls.join(" ")} });</script>
    </marko-web-gam-ad-wrapper>
  </div>
</if>
<else>
  $ warn("Unable to render ad unit: no `path` was provided.");
</else>
